@page "/Admin/Dashboard"
@using System.Text.Json
@model AdminDashboardModel
@{
    ViewData["Title"] = "Admin/Moderator Dashboard";
    ViewData["ShowBackground"] = false; // Asumo que esta es una propiedad que manejas para el fondo
}

<div class="container py-4">
    <h2 class="mb-4 text-center fw-bold py-5">Admin/Moderator Dashboard</h2>

    @if (!string.IsNullOrEmpty(Model.StatusMessage))
    {
        var alertClass = Model.StatusMessage.StartsWith("Error") ? "alert-danger" : "alert-success";
        <div class="alert @alertClass alert-dismissible fade show" role="alert">
            @Model.StatusMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @* --- SECCIÓN SÓLO PARA ADMINS --- *@
    @if (User.IsInRole("admin"))
    {
        <div class="card p-4 shadow-sm rounded-4 bg-light mb-5">
            <h4 class="mb-4">Admin Only Actions</h4>

            <div class="d-flex flex-wrap gap-3">
                <button type="button" class="btn btn-primary btn-lg" data-bs-toggle="modal" data-bs-target="#manageRolesModal">
                    <i class="bi bi-person-gear"></i> Manage User Roles
                </button>
                <button type="button" class="btn btn-success btn-lg" data-bs-toggle="modal" data-bs-target="#addGameModal">
                    <i class="bi bi-plus-circle"></i> Add New Game
                </button>
                <button type="button" class="btn btn-info btn-lg" data-bs-toggle="modal" data-bs-target="#viewAllUsersModal">
                    <i class="bi bi-people"></i> View All Users
                </button>
            </div>
        </div>
    }

    @* --- SECCIONES PARA ADMINS Y MODERADORES --- *@
    <div class="card p-4 shadow-sm rounded-4 bg-light mb-5">
        <h4 class="mb-4">Reports and Sanctions Management</h4>

        <div class="d-flex flex-wrap gap-3">
            <button type="button" class="btn btn-warning btn-lg" data-bs-toggle="modal" data-bs-target="#viewReportsModal">
                <i class="bi bi-flag"></i> View Reports (@Model.RecentReports.Count)
            </button>
            <button type="button" class="btn btn-danger btn-lg" data-bs-toggle="modal" data-bs-target="#createSanctionModal">
                <i class="bi bi-shield-fill-x"></i> Create Sanction
            </button>
            <button type="button" class="btn btn-secondary btn-lg" data-bs-toggle="modal" data-bs-target="#viewSanctionsModal">
                <i class="bi bi-journal-check"></i> View Sanctions (@Model.ActiveSanctions.Count)
            </button>
        </div>
    </div>
</div>

@* =========================== MODALES =========================== *@

@* Modal: Manage User Roles (Admin Only) *@
<div class="modal fade" id="manageRolesModal" tabindex="-1" aria-labelledby="manageRolesModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="manageRolesModalLabel">Manage User Roles</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @* PROMOTE USER SECTION *@
                <h6 class="mb-3">Promote User to Moderator</h6>
                <div class="mb-4">
                    <input type="text" id="promoteUserSearchInput" class="form-control mb-2" placeholder="Search username to promote..." />
                    <div id="promoteUserSearchResults" class="list-group user-search-results"></div>

                    <form method="post" asp-page-handler="PromoteUser" class="d-none mt-3" id="promoteUserForm">
                        @Html.AntiForgeryToken()
                        @* Importante: el "name" debe ser 'input.UserId' para que el model binding lo encuentre en PromoteUserInput *@
                        <input type="hidden" name="input.UserId" id="selectedPromoteUserId" /> 
                        <p class="mb-2">
                            Promote: <strong id="promoteSelectedUsername"></strong>
                            (Current Role:
                            <span id="promoteCurrentUserRole" class="badge"></span>)
                        </p>
                        <button type="submit" class="btn btn-success w-100">Confirm Promote</button>
                    </form>
                </div>

                <hr />

                @* DEMOTE USER SECTION *@
                <h6 class="mb-3">Demote Moderator to User</h6>
                <div class="mb-4">
                    <input type="text" id="demoteUserSearchInput" class="form-control mb-2" placeholder="Search username to demote..." />
                    <div id="demoteUserSearchResults" class="list-group user-search-results"></div>

                    <form method="post" asp-page-handler="DemoteUser" class="d-none mt-3" id="demoteUserForm">
                        @Html.AntiForgeryToken()
                        @* Importante: el "name" debe ser 'input.UserId' para que el model binding lo encuentre en DemoteUserInput *@
                        <input type="hidden" name="input.UserId" id="selectedDemoteUserId" />
                        <p class="mb-2">
                            Demote: <strong id="demoteSelectedUsername"></strong>
                            (Current Role:
                            <span id="demoteCurrentUserRole" class="badge"></span>)
                        </p>
                        <button type="submit" class="btn btn-warning w-100">Confirm Demote</button>
                    </form>
                </div>

            </div>
        </div>
    </div>
</div>

@* Modal: Add New Game (Admin Only) *@
<div class="modal fade" id="addGameModal" tabindex="-1" aria-labelledby="addGameModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="addGameModalLabel">Add New Game</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="text-muted small">Enter a valid Steam store URL for the game.</p>
                <form method="post" asp-page-handler="AddGame">
                    @Html.AntiForgeryToken()
                    <div class="input-group mb-3">
                        @* NOTA: Aquí asp-for ya no puede referenciar a Model.AddGameInput porque ya no existe como propiedad.
                           Pero Razor Pages es inteligente. Para el 'asp-for' puedes seguir usando 'AddGameInput.SteamLink'
                           porque sabe que es un ViewModel que se espera como parámetro en el handler.
                           Para el 'name', es crucial que sea 'addGameInput.SteamLink' para que el model binder lo encuentre. *@
                        <input asp-for="addGameInput.SteamLink" name="addGameInput.SteamLink" type="text" class="form-control" placeholder="https://store.steampowered.com/app/XXXXX/Game_Name/" required />
                        <button type="submit" class="btn btn-primary">Import Game</button>
                    </div>
                    <span asp-validation-for="addGameInput.SteamLink" class="text-danger"></span>

                    @* Mostrar resultado de la importación (si existe). Esto sí usa Model.AddGameResult, que es una propiedad del PageModel. *@
                    @if (!string.IsNullOrEmpty(Model.AddGameResult.ImportStatusMessage))
                    {
                        <div class="alert @(Model.AddGameResult.ImportStatusMessage.StartsWith("Success") ? "alert-success" : "alert-danger") mt-2">
                            @Model.AddGameResult.ImportStatusMessage
                            @if (Model.AddGameResult.ImportedGameId.HasValue)
                            {
                                <a asp-page="/Games/Details" asp-route-gameId="@Model.AddGameResult.ImportedGameId.Value" class="alert-link ms-2">View Game</a>
                            }
                        </div>
                    }
                     @* Mostrar errores específicos del modal si hay (ej. después de un error de validación) *@
                    @if (!ViewData.ModelState.IsValid && ViewData.ModelState.ContainsKey("addGameInput.SteamLink"))
                    {
                        <div class="alert alert-danger mt-2">
                            <strong>Errores en el enlace:</strong>
                            <ul>
                                @foreach (var error in ViewData.ModelState["addGameInput.SteamLink"].Errors)
                                {
                                    <li>@error.ErrorMessage</li>
                                }
                            </ul>
                        </div>
                    }
                </form>
            </div>
        </div>
    </div>
</div>

@* Modal: View All Users (Admin Only) - SIN CAMBIOS (no afecta el problema del 400) *@
<div class="modal fade" id="viewAllUsersModal" tabindex="-1" aria-labelledby="viewAllUsersModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title" id="viewAllUsersModalLabel">All Users</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (Model.AllUsers.Any())
                {
                    <ul class="list-group">
                        @foreach (var user in Model.AllUsers)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <img src="@user.AvatarUrl" alt="Avatar" class="rounded-circle me-2" width="32" height="32" style="object-fit: cover;">
                                @user.Username (@user.UserId)
                                <span class="badge bg-primary rounded-pill">@user.Role</span> 
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="text-muted">No users found or functionality not implemented yet.</p>
                }
            </div>
        </div>
    </div>
</div>

@* Modal: View Reports (Admin & Moderator) - SIN CAMBIOS (no afecta el problema del 400) *@
<div class="modal fade" id="viewReportsModal" tabindex="-1" aria-labelledby="viewReportsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-xl">
        <div class="modal-content">
            <div class="modal-header bg-warning text-white">
                <h5 class="modal-title" id="viewReportsModalLabel">Recent Reports</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (Model.RecentReports.Any())
                {
                    <ul class="list-group">
                        @foreach (var report in Model.RecentReports.OrderBy(r => r.Status == "pending" ? 0 : 1).ThenByDescending(r => r.ReportedAt))
                        {
                            <li class="list-group-item mb-2 flex-wrap @(report.Status == "pending" ? "border-warning border-2" : "")">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div>
                                        <strong>Report #@report.ReportId.Substring(0, 8)...</strong><br />
                                        <small class="text-muted">
                                            Reported: <a href="/Users/Profile/Index?userId=@report.ReportedUserId">@report.ReportedUsername</a>
                                            (Type: @report.ContentType)
                                        </small><br />
                                        <small class="text-muted">By: <a href="/Users/Profile/Index?userId=@report.ReporterId">@report.ReporterUsername</a></small><br /> 
                                        <p class="mb-1">Reason: @report.Reason</p>
                                        <small class="text-muted">Status: <span class="badge @(report.Status == "pending" ? "bg-warning" : "bg-success")">@report.Status</span></small>
                                        <small class="text-muted ms-2">Reported on: @report.ReportedAt.ToString("yyyy-MM-dd HH:mm")</small>
                                    </div>
                                    <div class="text-end">
                                        @if (report.Status == "pending")
                                        {
                                            <form method="post" asp-page-handler="PrepareSanction" class="d-inline">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="reportId" value="@report.ReportId" />
                                                <input type="hidden" name="reportedUserId" value="@report.ReportedUserId" />
                                                <button type="submit" class="btn btn-sm btn-success me-1">
                                                    Resolve & Sanction
                                                </button>
                                            </form>
                                        }
                                        <form method="post" asp-page-handler="DeleteReport" class="d-inline">
                                            @Html.AntiForgeryToken()
                                            
                                            @* --- AÑADE ESTA LÍNEA CRUCIAL --- *@
                                            <input type="hidden" name="reportId" value="@report.ReportId" />

                                            @* --- RECOMENDADO: Añadir confirmación para evitar borrados accidentales --- *@
                                            <button type="submit" class="btn btn-sm btn-danger" 
                                                    onclick="return confirm('¿Estás seguro de que quieres eliminar este reporte? Esta acción no se puede deshacer.');">
                                                Eliminar
                                            </button>
                                        </form>
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="text-muted">No recent reports.</p>
                }
            </div>
        </div>
    </div>
</div>

@* Modal: Create Sanction (Admin & Moderator) *@
<div class="modal fade" id="createSanctionModal" tabindex="-1" aria-labelledby="createSanctionModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" asp-page-handler="CreateSanction">
                @Html.AntiForgeryToken()
                <partial name="_ValidationScriptsPartial" />
                <div asp-validation-summary="All" class="text-danger"></div>

                <div class="modal-header">
                    <h5 class="modal-title" id="createSanctionModalLabel">Crear sanción</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>

                <div class="modal-body">
                    <h6 class="mb-3">Usuario a Sancionar</h6>
                    <div class="mb-3">
                        <div class="input-group">
                            <input type="text" id="sanctionUserSearchInput" class="form-control" placeholder="Buscar usuario por nombre de usuario..." />
                            <button class="btn btn-outline-secondary" type="button" id="searchSanctionUserBtn">Buscar</button>
                        </div>
                        <div id="sanctionUserSearchResults" class="list-group user-search-results mt-2">
                            </div>

                        <div id="selectedSanctionUserDisplay" class="alert alert-info mt-2 @(Model.SelectedSanctionUser != null ? "" : "d-none")">
                            Usuario seleccionado: <strong id="sanctionSelectedUsernameDisplay">@(Model.SelectedSanctionUser?.Username)</strong>
                            (<span id="sanctionSelectedUserRoleDisplay">@(Model.SelectedSanctionUser?.Role)</span>)
                            <button type="button" class="btn-close float-end" aria-label="Limpiar selección" onclick="clearSanctionUserSelection()"></button>
                        </div>
                    </div>

                    <input asp-for="CreateSanctionInput.ReportId" id="createSanctionReportId" type="hidden" />

                    <input asp-for="CreateSanctionInput.UserId" id="createSanctionUserId" type="hidden" required />
                    <span asp-validation-for="CreateSanctionInput.UserId" class="text-danger"></span>

                    <div class="mb-3">
                        <label asp-for="CreateSanctionInput.Type" class="form-label"></label>
                        <select asp-for="CreateSanctionInput.Type" class="form-select" required>
                            <option value="">Selecciona tipo de sanción</option>
                            <option value="ban">Ban</option>
                            <option value="suspension">Suspensión</option>
                        </select>
                        <span asp-validation-for="CreateSanctionInput.Type" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="CreateSanctionInput.Reason" class="form-label"></label>
                        <textarea asp-for="CreateSanctionInput.Reason" class="form-control" rows="3" required></textarea>
                        <span asp-validation-for="CreateSanctionInput.Reason" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="CreateSanctionInput.StartDate" class="form-label"></label>
                        <input asp-for="CreateSanctionInput.StartDate" type="date" class="form-control" required />
                        <span asp-validation-for="CreateSanctionInput.StartDate" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="CreateSanctionInput.EndDate" class="form-label"></label>
                        <input asp-for="CreateSanctionInput.EndDate" type="date" class="form-control" />
                        <span asp-validation-for="CreateSanctionInput.EndDate" class="text-danger"></span>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="submit" class="btn btn-danger">Crear sanción</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                </div>
            </form>
        </div>
    </div>
</div>


@* Modal: View Sanctions (Admin & Moderator) - SIN CAMBIOS (no afecta el problema del 400) *@
<div class="modal fade" id="viewSanctionsModal" tabindex="-1" aria-labelledby="viewSanctionsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-secondary text-white">
                <h5 class="modal-title" id="viewSanctionsModalLabel">Active Sanctions</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (Model.ActiveSanctions.Any())
                {
                    <ul class="list-group">
                        @foreach (var sanction in Model.ActiveSanctions.OrderByDescending(s => s.StartDate))
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center mb-2 flex-wrap">
                                <div>
                                    <strong>@sanction.Type for User: <a href="/Users/Profile/Index?userId=@sanction.UserId" class="text-decoration-none">@sanction.UserId</a></strong>
                                    (@sanction.Reason)<br />
                                    <small class="text-muted">
                                        From: @sanction.StartDate.ToString("yyyy-MM-dd")
                                        @if (sanction.EndDate.HasValue) { <span>to @sanction.EndDate.Value.ToString("yyyy-MM-dd")</span> }
                                    </small>
                                </div>
                                @if (sanction.IsActive)
                                {
                                    <span class="badge bg-danger">ACTIVE</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">INACTIVE</span>
                                }
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="text-muted">No active sanctions.</p>
                }
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Your existing generic AJAX form handler (keep it as is)
            document.querySelectorAll('form.ajax-form').forEach(form => {
                form.addEventListener('submit', async function (e) {
                    e.preventDefault();

                    const formData = new FormData(this);
                    const handler = this.dataset.handler;

                    const successMessage = this.dataset.successMessage || 'Action completed successfully.';
                    const errorMessage = this.dataset.errorMessage || 'An error occurred. Please try again.';

                    try {
                        let url = `@Url.Page("/Admin/Dashboard")?handler=${handler}`;

                        const routeParams = {};
                        if (this.action.includes('?')) {
                            const queryString = this.action.split('?')[1];
                            const params = new URLSearchParams(queryString);
                            for (let [key, value] of params.entries()) {
                                if (key !== 'handler') {
                                    routeParams[key] = value;
                                }
                            }
                        }
                        for (let key in routeParams) {
                            if (routeParams.hasOwnProperty(key)) {
                                formData.append(key, routeParams[key]);
                            }
                        }

                        const requestVerificationToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
                        if (requestVerificationToken) {
                            formData.append('__RequestVerificationToken', requestVerificationToken);
                        }

                        const response = await fetch(url, {
                            method: 'POST',
                            body: formData,
                        });

                        if (response.ok) {
                            const resultText = await response.text();
                            let result = { success: true };
                            try {
                                result = JSON.parse(resultText);
                            } catch (e) {
                                result.success = true;
                            }

                            if (result.success) {
                                showAlert(successMessage, 'success');
                                const modal = bootstrap.Modal.getInstance(this.closest('.modal'));
                                if (modal) modal.hide();
                                window.location.reload();
                            } else {
                                showAlert(`Error: ${result.message || errorMessage}`, 'danger');
                            }

                        } else {
                            const errorText = await response.text();
                            let errorDetail = errorMessage;
                            try {
                                const errorJson = JSON.parse(errorText);
                                errorDetail = errorJson.detail || errorJson.message || errorMessage;
                            } catch (e) {
                                errorDetail = errorText || errorMessage;
                            }
                            showAlert(`Error: ${errorDetail}`, 'danger');
                        }

                    } catch (error) {
                        console.error('AJAX form submission error:', error);
                        showAlert('An unexpected error occurred.', 'danger');
                    }
                });
            });


            // --- NEW: LOGIC FOR CREATE SANCTION MODAL: USER SEARCH (AJAX) ---
            const sanctionUserSearchInput = document.getElementById('sanctionUserSearchInput');
            const searchSanctionUserBtn = document.getElementById('searchSanctionUserBtn');
            const sanctionUserSearchResults = document.getElementById('sanctionUserSearchResults');
            const selectedSanctionUserDisplay = document.getElementById('selectedSanctionUserDisplay');
            const sanctionSelectedUsernameDisplay = document.getElementById('sanctionSelectedUsernameDisplay');
            const sanctionSelectedUserRoleDisplay = document.getElementById('sanctionSelectedUserRoleDisplay');
            const createSanctionUserIdInput = document.getElementById('createSanctionUserId'); // Hidden input for UserId

            let searchTimeout = null;

            // Function to perform user search via AJAX
            async function performUserSearch(query) {
                if (query.length < 2) {
                    sanctionUserSearchResults.innerHTML = '';
                    return;
                }

                try {
                    // Call the OnGetSearchUsersForSanctionAsync handler
                    const url = `@Url.Page("/Admin/Dashboard")?handler=SearchUsersForSanction&query=${encodeURIComponent(query)}`;
                    const response = await fetch(url);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const users = await response.json();
                    displayUserSearchResults(users);
                } catch (error) {
                    console.error('Error searching users:', error);
                    sanctionUserSearchResults.innerHTML = '<div class="list-group-item text-danger">Error al buscar usuarios.</div>';
                }
            }

            // Displays search results in the designated container
            function displayUserSearchResults(users) {
                sanctionUserSearchResults.innerHTML = ''; // Clear previous results
                if (users && users.length > 0) {
                    users.forEach(user => {
                        const listItem = document.createElement('button');
                        listItem.type = 'button'; // Important: use button type to prevent accidental form submission
                        listItem.classList.add('list-group-item', 'list-group-item-action', 'd-flex', 'align-items-center');
                        listItem.innerHTML = `
                            <img src="${user.avatarUrl || '/images/default_avatar.png'}" class="rounded-circle me-2" width="24" height="24" style="object-fit: cover;">
                            <strong>${user.username}</strong> (<span class="badge bg-secondary">${user.role}</span>)
                        `;
                        // When a result is clicked, select the user
                        listItem.addEventListener('click', () => selectSanctionUser(user));
                        sanctionUserSearchResults.appendChild(listItem);
                    });
                } else {
                    sanctionUserSearchResults.innerHTML = '<div class="list-group-item text-muted">No se encontraron usuarios.</div>';
                }
            }

            // Selects a user for sanction, populating the hidden input
            function selectSanctionUser(user) {
                createSanctionUserIdInput.value = user.userId; // Set the ID in the hidden input

                // Display selected user's information
                sanctionSelectedUsernameDisplay.textContent = user.username;
                sanctionSelectedUserRoleDisplay.textContent = user.role;
                selectedSanctionUserDisplay.classList.remove('d-none');

                // Clear search input and results for better UX
                sanctionUserSearchInput.value = '';
                sanctionUserSearchResults.innerHTML = '';

                // Optional: focus the next field in the sanction form
                document.getElementById('CreateSanctionInput_Type').focus();
            }

            // Clears the selected user
            window.clearSanctionUserSelection = function() {
                createSanctionUserIdInput.value = ''; // Clear the ID in the hidden input
                sanctionSelectedUsernameDisplay.textContent = '';
                sanctionSelectedUserRoleDisplay.textContent = '';
                selectedSanctionUserDisplay.classList.add('d-none');
                // Clear validation errors for UserId if any
                const userIdValidationSpan = document.querySelector('span[data-valmsg-for="CreateSanctionInput.UserId"]');
                if (userIdValidationSpan) userIdValidationSpan.textContent = '';
            };

            // Event listener for real-time search (on input)
            sanctionUserSearchInput.addEventListener('input', function () {
                clearTimeout(searchTimeout); // Clear previous timeout
                const query = this.value;
                searchTimeout = setTimeout(() => {
                    performUserSearch(query);
                }, 300); // 300ms delay to avoid excessive requests
            });

            // Event listener for explicit search button click
            searchSanctionUserBtn.addEventListener('click', function () {
                performUserSearch(sanctionUserSearchInput.value);
            });

            // --- Control modal opening on page reload (e.g., after validation errors) ---
            const shouldOpenSanctionModal = @(ViewData["OpenCreateSanctionModal"] as bool? ?? false).ToString().toLowerCase();
            if (shouldOpenSanctionModal === 'true') {
                const sanctionModalElement = document.getElementById('createSanctionModal');
                if (sanctionModalElement) {
                    const sanctionModal = new bootstrap.Modal(sanctionModalElement);
                    sanctionModal.show();
                }
            }

            // --- Reset sanction modal on hide ---
            const createSanctionModalElement = document.getElementById('createSanctionModal');
            if (createSanctionModalElement) {
                createSanctionModalElement.addEventListener('hidden.bs.modal', function () {
                    this.querySelector('form').reset(); // Reset all form fields
                    clearSanctionUserSelection(); // Clear user selection

                    // Clear search results and validation messages
                    sanctionUserSearchResults.innerHTML = '';
                    const validationSummary = this.querySelector('[asp-validation-summary="All"]');
                    if (validationSummary) validationSummary.innerHTML = '';
                    this.querySelectorAll('.text-danger').forEach(span => span.textContent = '');
                });
            }

            // --- Pre-select user if modal is opened due to a server-side pre-selection (e.g., from "Resolve & Sanction" or validation error) ---
            // This ensures the selected user is shown correctly after a page reload.
            @if (Model.SelectedSanctionUser != null)
            {
                <text>
                    const preSelectedUser = @Html.Raw(JsonSerializer.Serialize(Model.SelectedSanctionUser));
                    selectSanctionUser(preSelectedUser);
                </text>
            }
        });

        // Your existing showAlert function (keep it as is)
        function showAlert(message, type) {
            const alertContainer = document.querySelector('.container .alert');
            if (!alertContainer) return;
            if (!message) {
                alertContainer.classList.add('d-none');
                return;
            }

            alertContainer.textContent = message;
            alertContainer.classList.remove('d-none', 'alert-success', 'alert-danger');
            alertContainer.classList.add(`alert-${type}`);

            const closeButton = alertContainer.querySelector('.btn-close');
            if (closeButton) closeButton.onclick = () => alertContainer.classList.add('d-none');

            setTimeout(() => {
                alertContainer.classList.add('d-none');
            }, 5000);
        }
    </script>
}
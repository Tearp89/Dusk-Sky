@page "{gameId:guid}"
@model GameDetailsModel
@{
    ViewData["Title"] = Model.Game.Title;
    ViewData["ShowBackground"] = true; 
    ViewData["UseBlurEffect"] = true;
    ViewData["BackgroundImage"] = Url.Content(Model.GamePreview.HeaderUrl);
}

<!-- Overlay de información encima del fondo -->
<div class="game-overlay-content container d-flex gap-4 align-items-end">
    <img src="@Model.GamePreview.HeaderUrl" class="rounded shadow" alt="Poster"
         style="height: 220px; width: auto; object-fit: cover;" />
    <div>
        <h1 class="text-white fw-bold">@Model.Game.Title</h1>
        <p class="text-light mb-1">@Model.Game.ReleaseDate — <em>@Model.Game.Developer</em></p>

        <div class="d-flex flex-wrap gap-2 mt-2">
            <form method="post" asp-page-handler="ToggleTracking">
                <input type="hidden" name="trackingType" value="watch" />
                <input type="hidden" name="gameId" value="@Model.Game.Id" />
                <button class="btn btn-outline-light btn-sm button-glass" type="submit">
                    <i class="bi @(Model.IsWatched ? "bi-eye-fill" : "bi-eye")"></i> Watch
                </button>
            </form>
            <form method="post" asp-page-handler="ToggleTracking">
                <input type="hidden" name="trackingType" value="like" />
                <input type="hidden" name="gameId" value="@Model.Game.Id" />
                <button class="btn btn-outline-light btn-sm button-glass" type="submit">
                    <i class="bi @(Model.IsLiked ? "bi-heart-fill" : "bi-heart")"></i> Like
                </button>
            </form>
            <form method="post" asp-page-handler="ToggleTracking">
                <input type="hidden" name="trackingType" value="watchlist" />
                <input type="hidden" name="gameId" value="@Model.Game.Id" />
                <button class="btn btn-outline-light btn-sm button-glass" type="submit">
                    <i class="bi @(Model.IsInWatchlist ? "bi-bookmark-check-fill" : "bi-bookmark-plus")"></i> Watchlist
                </button>
            </form>
            <button type="button" class="btn btn-outline-light btn-sm button-glass" data-bs-toggle="modal" data-bs-target="#reviewLogModal">
                <i class="bi bi-pencil"></i> Review or log...
            </button>
            <button class="btn btn-outline-light btn-sm button-glass" data-bs-toggle="modal" data-bs-target="#listModal">
                <i class="bi bi-list-stars"></i> Add to list
            </button>
        </div>
    </div>
</div>

<!-- El resto del contenido (descripciones, reviews, etc.) -->
<div class="container mt-5 mb-5">
    <div class="row">
        <div class="col-lg-8">
            <h4 class="fw-bold">A new and altogether different screen excitement!</h4>
            <p class="text-muted">@Model.Game.Description</p>

            <div class="mb-3">
                <strong>Genres:</strong>
                @foreach (var genre in Model.Game.Genres)
                {
                    <span class="badge bg-primary me-1">@genre</span>
                }
            </div>

            <div class="mb-3">
                <strong>Publisher:</strong> @Model.Game.Publisher
            </div>
            <div class="mb-3">
                <strong>Platforms:</strong>
                @foreach (var platform in Model.Game.Platforms.Where(p => p.Value))
                {
                    <span class="badge bg-secondary me-1 text-capitalize">@platform.Key</span>
                }
            </div>
            <hr>
            <h5 class="mt-4 fw-bold">Popular Reviews</h5>
            @foreach (var review in Model.Reviews)
            {
                <div class="card mb-4 shadow-sm border-0">
                    <div class="card-body d-flex gap-3">
                        <img src="@review.ProfileImageUrl" class="rounded-circle shadow-sm"
                            style="width: 48px; height: 48px; object-fit: cover;" alt="Avatar" />
                        <div class="flex-grow-1">
                            <div class="d-flex justify-content-between align-items-center mb-1">
                                <div>
                                    <strong>@review.UserName</strong> <span class="text-muted">reviewed</span>
                                    <strong>@review.GameTitle</strong>
                                </div>
                            </div>
                            <div class="mb-2">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    if (i <= review.Rating)
                                    {
                                        <i class="bi bi-star-fill text-warning"></i>
                                    }
                                    else if (i - review.Rating < 1)
                                    {
                                        <i class="bi bi-star-half text-warning"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-star text-warning"></i>
                                    }
                                }
                            </div>
                            <p class="mb-2">@review.Content.Substring(0, Math.Min(180, review.Content.Length))...</p>
                            <a href="/Reviews/Details/@review.Id" class="btn btn-sm btn-outline-primary">Read more</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Modal para listas -->
<div class="modal fade" id="listModal" tabindex="-1" aria-labelledby="listModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content bg-light text-black">
            <div class="modal-header border-0">
                <h5 class="modal-title fw-bold" id="listModalTitle" data-game-id="@Model.Game.Id">
                    Add ‘@Model.Game.Title’ to a list
                </h5>
                <button type="button" class="btn-close btn-close-dark" data-bs-dismiss="modal"
                    aria-label="Close"></button>
            </div>

            <div class="modal-body px-4">
                <input type="text" id="searchListInput" class="form-control mb-3 input-glass rounded-pill"
                    placeholder="Search for an existing list...">

                <div id="userListsContainer" class="d-flex flex-wrap gap-3 mb-4">
                    @foreach (var list in Model.UserLists)
                    {
                        <form method="post" asp-page-handler="AddGameToList" class="add-list-form">
                            <input type="hidden" name="ListId" value="@list.Id" />
                            <input type="hidden" name="GameId" value="@Model.Game.Id" />
                            <button type="submit" class="btn btn-outline-dark">@list.Name</button>
                        </form>
                    }
                </div>

                <div class="text-center">
                    <button onclick="location.href='/Lists/Creator?defaultName=&gameId=@Model.Game.Id'">
                        Create New List
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="listSuccessMessage" class="alert alert-success d-none mt-3 text-center">
    List created and game added successfully!
</div>

<div class="modal fade" id="reviewLogModal" tabindex="-1" aria-labelledby="reviewLogModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content shadow glassy-modal">
            <div class="modal-header bg-primary text-white button-glass-blue">
                <h5 class="modal-title" id="reviewLogModalLabel">Log a Game</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <form id="reviewForm" method="post">
                <div class="modal-body">
                    <input type="hidden" name="GameId" value="@Model.Game.Id" />

                    <div class="mb-3">
                        <label for="Content" class="form-label">Review</label>
                        <textarea class="form-control" name="Content" rows="4" required></textarea>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Rating</label>
                        <div id="starRating" class="d-flex gap-1">
                            @for (var i = 1; i <= 5; i++)
                            {
                                <i class="bi bi-star-fill text-secondary star" data-value="@i"
                                    style="cursor: pointer; font-size: 1.5rem;"></i>
                            }
                        </div>
                        <input type="hidden" name="Rating" id="RatingInput" value="0" />
                    </div>

                    <div class="form-check mb-2">
                        <input type="checkbox" class="form-check-input" id="WatchedBefore" name="WatchedBefore">
                        <label class="form-check-label" for="WatchedBefore">I've played this before</label>
                    </div>

                    <div class="mb-3">
                        <label for="WatchedOn" class="form-label">Played On</label>
                        <input type="date" name="WatchedOn" class="form-control" />
                    </div>
                </div>
                <div class="modal-footer">
                    <span id="reviewSuccessMessage" class="text-success me-auto d-none">Review submitted!</span>
                    <button type="submit" class="btn btn-primary">Submit Review</button>
                </div>
            </form>
        </div>
    </div>
</div>




@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // ⭐ Rating
            const stars = document.querySelectorAll('.star');
            const ratingInput = document.getElementById('RatingInput');

            stars.forEach(star => {
                star.addEventListener('click', () => {
                    const rating = star.dataset.value;
                    ratingInput.value = rating;

                    stars.forEach(s => {
                        s.classList.remove('text-warning');
                        if (s.dataset.value <= rating) {
                            s.classList.add('text-warning');
                        }
                    });
                });
            });

            // 📝 Enviar review
            const reviewForm = document.getElementById('reviewForm');
            reviewForm.addEventListener('submit', async function (e) {
                e.preventDefault();
                const form = e.target;
                const data = new FormData(form);

                const response = await fetch('?handler=LogReviewWithTracking', {
                    method: 'POST',
                    body: data
                });


                if (response.ok) {
                    document.getElementById('reviewSuccessMessage').classList.remove('d-none');
                    setTimeout(() => {
                        const modal = bootstrap.Modal.getInstance(document.getElementById('reviewLogModal'));
                        if (modal) modal.hide();
                        form.reset();
                        stars.forEach(s => s.classList.remove('text-warning'));
                        ratingInput.value = 0;
                        document.getElementById('reviewSuccessMessage').classList.add('d-none');

                        // TODO: Opcional: Recargar lista de reseñas
                        // location.reload();
                    }, 1500);
                } else {
                    alert('Failed to submit review.');
                }
            });

            // 🔍 Filtrar listas
            const input = document.getElementById("searchListInput");
            const container = document.getElementById("userListsContainer");

            if (input && container) {
                input.addEventListener("input", () => {
                    const query = input.value.toLowerCase();
                    const forms = container.querySelectorAll("form");

                    forms.forEach(form => {
                        const text = form.querySelector("button").innerText.toLowerCase();
                        form.style.display = text.includes(query) ? "inline-block" : "none";
                    });
                });
            }

            // 📥 Enviar formularios de agregar a lista (sin recargar)
            document.querySelectorAll(".add-list-form").forEach(form => {
                form.addEventListener("submit", async (e) => {
                    e.preventDefault();

                    const formData = new FormData(form);

                    try {
                        const response = await fetch("?handler=AddGameToList", {
                            method: "POST",
                            body: formData
                        });

                        const result = await response.json();

                        const modal = document.getElementById("listModal");
                        const modalInstance = bootstrap.Modal.getInstance(modal);
                        if (modalInstance) modalInstance.hide();

                        const message = document.getElementById("listSuccessMessage");
                        if (message) {
                            message.textContent = result.success
                                ? "✅ Game added to list!"
                                : "❌ " + (result.message || "Error adding game to list.");

                            message.classList.remove("d-none", "alert-success", "alert-danger");
                            message.classList.add(result.success ? "alert-success" : "alert-danger");

                            setTimeout(() => message.classList.add('d-none'), 4000);
                        }
                    } catch (err) {
                        console.error("Error en AddGameToList:", err);
                    }
                });
            });
        });
    </script>
}


<style>
    .game-overlay-content {
        position: absolute;
        top: 55%;
        left: 50%;
        transform: translateX(-50%);
        z-index: 10;
        color: white;
    }
</style>


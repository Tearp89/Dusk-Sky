@page "{gameId:guid}"
@model GameDetailsModel
@{
    ViewData["Title"] = Model.GamePreview.Title;
    ViewData["ShowBackground"] = true; 
    ViewData["UseBlurEffect"] = true;
    ViewData["BackgroundImage"] = Url.Content(Model.Game.RandomScreenshot);
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1100;">
        <div class="toast align-items-center text-white bg-success border-0 show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    @TempData["SuccessMessage"]
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Cerrar"></button>
            </div>
        </div>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1100;">
        <div class="toast align-items-center text-white bg-danger border-0 show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    @TempData["ErrorMessage"]
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Cerrar"></button>
            </div>
        </div>
    </div>
}
<!-- Overlay de información encima del fondo -->
<div class="game-overlay-content container d-flex gap-4 align-items-end">
    <img src="@Model.Game.HeaderUrl" class="rounded shadow" alt="Poster"
         style="height: 220px; width: auto; object-fit: cover;" />
    <div>
        <h1 class="text-white fw-bold">@Model.GamePreview.Title</h1>
        <p class="text-light mb-1">@Model.Game.ReleaseDate — <em>@Model.Game.Developer</em></p>

        <div class="d-flex flex-wrap gap-2 mt-2">
            <form method="post" asp-page-handler="ToggleTracking">
                <input type="hidden" name="trackingType" value="watch" />
                <input type="hidden" name="gameId" value="@Model.Game.Id" />
                <button class="btn btn-outline-light btn-sm button-glass" type="submit">
                    <i class="bi @(Model.IsWatched ? "bi-eye-fill" : "bi-eye")"></i> Jugado                </button>
            </form>
            <form method="post" asp-page-handler="ToggleTracking">
                <input type="hidden" name="trackingType" value="like" />
                <input type="hidden" name="gameId" value="@Model.Game.Id" />
                <button class="btn btn-outline-light btn-sm button-glass" type="submit">
                    <i class="bi @(Model.IsLiked ? "bi-heart-fill" : "bi-heart")"></i> Me gusta
                </button>
            </form>
            <form method="post" asp-page-handler="ToggleTracking">
                <input type="hidden" name="trackingType" value="watchlist" />
                <input type="hidden" name="gameId" value="@Model.Game.Id" />
                <button class="btn btn-outline-light btn-sm button-glass" type="submit">
                    <i class="bi @(Model.IsInWatchlist ? "bi-bookmark-check-fill" : "bi-bookmark-plus")"></i> Playlist
                </button>
            </form>
            <button type="button" class="btn btn-outline-light btn-sm button-glass" data-bs-toggle="modal" data-bs-target="#reviewModal">
                <i class="bi bi-pencil"></i> Reseñar...
            </button>
            <button class="btn btn-outline-light btn-sm button-glass" data-bs-toggle="modal" data-bs-target="#listModal">
                <i class="bi bi-list-stars"></i> Agregar a una lista
            </button>
        </div>
    </div>
</div>

<!-- El resto del contenido (descripciones, reviews, etc.) -->
<div class="container mt-5 mb-5">
    <div class="row">
        <div class="col-12">
            <h4 class="fw-bold">A new and altogether different screen excitement!</h4>
            <p class="text-muted">@Model.Game.Description</p>

            <div class="mb-3">
                <strong>Géneros:</strong>
                @foreach (var genre in Model.Game.Genres)
                {
                    <span class="badge bg-primary me-1">@genre</span>
                }
            </div>

            <div class="mb-3">
                <strong>Distribuidor:</strong> @Model.Game.Publisher
            </div>
            <div class="mb-3">
                <strong>Plataformas:</strong>
                @foreach (var platform in Model.Game.Platforms.Where(p => p.Value))
                {
                    <span class="badge bg-secondary me-1 text-capitalize">@platform.Key</span>
                }
            </div>
            <hr>
            <div class="mb-4"> @* Contenedor para la sección de capturas *@
                <h5 class="fw-bold mb-3">Screenshots</h5>
                <div class="horizontal-scroll-container screenshots-scroll-container">
                    @if (Model.Game.AllScreenshots != null && Model.Game.AllScreenshots.Any())
                    {
                        @foreach (var screenshotUrl in Model.Game.AllScreenshots)
                        {
                            <div class="screenshot-item clickable-card"
                                data-bs-toggle="modal" data-bs-target="#screenshotModal"
                                data-screenshot-url="@screenshotUrl"> @* ¡CAMBIOS AQUÍ! *@
                                <img src="@screenshotUrl" alt="Screenshot del juego" class="img-fluid screenshot-img" />
                            </div>
                        }
                    }
                    else
                    {
                        <div class="no-screenshots-placeholder">
                            <i class="bi bi-image-fill me-2"></i> No screenshots available
                        </div>
                    }
                </div>
            </div>
            
            <h5 class="mt-4 fw-bold">Reviews Populares</h5>
            @foreach (var review in Model.Reviews)
            {
                <div class="card mb-4 shadow-sm border-0">
    <div class="card-body d-flex gap-3">
        <img src="@review.ProfileImageUrl" class="rounded-circle shadow-sm"
            style="width: 48px; height: 48px; object-fit: cover;" alt="Avatar" />
        <div class="flex-grow-1">
            <div class="d-flex justify-content-between align-items-center mb-1">
                <div>
                    <strong>@review.UserName</strong> <span class="text-muted">reseñado</span>
                    <strong>@review.GameTitle</strong>
                </div>
            </div>
                    <div class="mb-2">
                        @for (int i = 1; i <= 5; i++)

                                        {

                                            if (i <= review.Rating)

                                            {

                                                <i class="bi bi-star-fill text-warning"></i>

                                            }

                                            else if (i - review.Rating < 1)

                                            {

                                                <i class="bi bi-star-half text-warning"></i>

                                            }

                                            else

                                            {

                                                <i class="bi bi-star text-warning"></i>

                                            }

                                        }
                    </div>
                    <p class="mb-2">@review.Content.Substring(0, Math.Min(180, review.Content.Length))...</p>
                    <a href="/Reviews/Details?reviewId=@review.Id" class="btn btn-sm btn-outline-primary">Read more</a>
                </div>
            </div>
        </div>
            }
        </div>
    </div>
</div>

<!-- Modal para listas -->
<div class="modal fade" id="listModal" tabindex="-1" aria-labelledby="listModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content bg-light text-black">
            <div class="modal-header border-0">
                <h5 class="modal-title fw-bold" id="listModalTitle" data-game-id="@Model.Game.Id">
                    Agregar ‘@Model.GamePreview.Title’ a una lista
                </h5>
                <button type="button" class="btn-close btn-close-dark" data-bs-dismiss="modal"
                    aria-label="Close"></button>
            </div>

            <div class="modal-body px-4">
                <input type="text" id="searchListInput" class="form-control mb-3 input-glass rounded-pill"
                    placeholder="Search for an existing list...">

                <div id="userListsContainer" class="d-flex flex-wrap gap-3 mb-4">
                    @foreach (var list in Model.UserLists)
                    {
                        <form method="post" asp-page-handler="AddGameToList" class="add-list-form">
                            <input type="hidden" name="ListId" value="@list.Id" />
                            <input type="hidden" name="GameId" value="@Model.Game.Id" />
                            <button type="submit" class="btn btn-outline-dark">@list.Name</button>
                        </form>
                    }
                </div>

                <div class="text-center">
                    <button onclick="location.href='/Lists/Creator?defaultName=&gameId=@Model.Game.Id'">
                        Crear nueva lista
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="listSuccessMessage" class="alert alert-success d-none mt-3 text-center">
    ¡Lista creada y juego añadido exitosamente!
</div>

<div class="modal fade" id="reviewModal" tabindex="-1" aria-labelledby="reviewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content shadow glassy-modal">
            <div class="modal-header bg-dark text-white button-glass-blue">
                <h5 class="modal-title" id="reviewModalLabel">Jugué...</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                    aria-label="Close"></button>
            </div>
            <form id="logReviewForm" method="post" asp-page-handler="LogReviewWithTracking">
                <div class="modal-body">
                    <input type="hidden" name="GameId" value="@Model.GamePreview.Id.ToString()" />

                    <div class="d-flex flex-column flex-md-row gap-4 mb-4 align-items-start">
                        <img src="@Model.GamePreview.HeaderUrl" alt="Game cover" class="rounded shadow"
                            style="width: 180px; height: auto; max-height: 240px; object-fit: cover;" />

                        <div class="flex-grow-1">
                            <h4 class="fw-bold">@Model.GamePreview.Title <span
                                    class="text-muted">@Model.Game.ReleaseDate</span></h4>

                            <div class="mb-3 d-flex align-items-center gap-2">
                                <input type="radio" name="Like" id="likedTrueModal" value="true" class="d-none" />
                                <input type="radio" name="Like" id="likedFalseModal" value="false" checked class="d-none" />

                                <label for="likedTrueModal" class="heart-label-modal" style="cursor: pointer;">
                                    <svg class="heart-icon-modal" viewBox="0 0 24 24">
                                        <path id="heartPathModal" d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5
                                                2 5.42 4.42 3 7.5 3c1.74 0 3.41 0.81 4.5 2.09
                                                C13.09 3.81 14.76 3 16.5 3
                                                19.58 3 22 5.42 22 8.5
                                                c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" />
                                    </svg>
                                </label>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="Content" class="form-label">Reseña</label>
                        <textarea name="Content" class="form-control" placeholder="Añade una reseña..."
                            rows="4"></textarea>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Calificación</label>
                        <div class="full-star-rating-modal">
                            @for (int i = 5; i >= 1; i--)
                            {
                                var value = i.ToString();
                                var id = $"starModal-{value}";
                                <input type="radio" name="Rating" id="@id" value="@value" />
                                <label for="@id">
                                    <svg viewBox="0 0 24 24" class="star-svg-modal">
                                        <path
                                            d="M12 17.27L18.18 21 16.54 13.97 22 9.24 14.81 8.63 12 2 9.19 8.63 2 9.24 7.46 13.97 5.82 21z"
                                            class="star-base-modal" />
                                    </svg>
                                </label>
                            }
                        </div>
                        <input type="hidden" name="Rating" id="RatingInputModal" value="0" />
                    </div>

                    <div class="mb-3 watched-box glassy p-3 rounded-4 shadow-sm">
                        <div class="form-check form-switch mb-2">
                            <input name="WatchedOnEnabled" class="form-check-input" type="checkbox" id="watchedToggleModal"
                                checked />
                            <label class="form-check-label fw-semibold" for="watchedToggleModal">Jugado el</label>
                        </div>
                        <input type="date" name="WatchedOn" class="form-control mt-2 glassy-box-input" id="watchedDateModal"
                            max="@DateTime.Now.ToString("yyyy-MM-dd")" style="max-width: 220px;"
                            value="@DateTime.Today.ToString("yyyy-MM-dd")" />


                        <div class="form-check mt-3" id="playedBeforeContainerModal">
                            <input name="PlayedBefore" class="form-check-input" type="checkbox" id="PlayedBeforeModal" />
                            <label class="form-check-label" for="PlayedBeforeModal">Jugué esto antes</label>
                        </div>
                    </div>

                    

                </div>
                <div class="modal-footer">
                    <span id="reviewSuccessMessageModal" class="text-success me-auto d-none">¡Reseña enviada!</span>
                    <button type="submit" class="btn btn-success button-glass-blue">Guardar</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="screenshotModal" tabindex="-1" aria-labelledby="screenshotModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-xl"> 
        <div class="modal-content glassy-modal"> 
            <div class="modal-header border-0 pb-0">
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center pt-0">
                <img id="enlargedScreenshot" src="" class="img-fluid rounded" alt="Enlarged Screenshot" style="max-height: 90vh; width: auto;" />
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            
            const starRatingContainerModal = document.querySelector(".full-star-rating-modal");
            const ratingInputModal = document.getElementById("RatingInputModal");

            if (starRatingContainerModal && ratingInputModal) {
                const starsModal = starRatingContainerModal.querySelectorAll(".star-svg-modal");
                const radioButtonsModal = starRatingContainerModal.querySelectorAll("input[type='radio']");

                starRatingContainerModal.addEventListener('click', function(e) {
                    const target = e.target.closest('label');
                    if (target) {
                        const selectedValue = target.getAttribute('for').split('-')[1];
                        ratingInputModal.value = selectedValue; 

                    }
                });

                
                starRatingContainerModal.addEventListener('mouseover', function(e) {
                    const targetLabel = e.target.closest('label');
                    if (targetLabel) {
                        const hoveredValue = parseInt(targetLabel.getAttribute('for').split('-')[1]);
                        starsModal.forEach((star, index) => {
                            const starValue = parseInt(star.closest('label').getAttribute('for').split('-')[1]);
                            if (starValue <= hoveredValue) {
                                star.style.fill = 'gold'; 
                            } else {
                                const correspondingRadio = document.getElementById(`starModal-${starValue}`);
                                if (!correspondingRadio.checked) {
                                    star.style.fill = '#ddd';
                                }
                            }
                        });
                    }
                });

                starRatingContainerModal.addEventListener('mouseout', function() {
                    starsModal.forEach(star => {
                        const starValue = parseInt(star.closest('label').getAttribute('for').split('-')[1]);
                        const correspondingRadio = document.getElementById(`starModal-${starValue}`);
                        if (correspondingRadio.checked) {
                            star.style.fill = 'gold'; 
                        } else {
                            star.style.fill = '#ddd'; 
                        }
                    });
                });

                
                function initializeStarRatingModal() {
                    const initialRating = parseInt(ratingInputModal.value);
                    starsModal.forEach(star => {
                        star.style.fill = '#ddd'; 
                    });
                    if (initialRating > 0) {
                        for (let i = 1; i <= initialRating; i++) {
                            const starLabel = document.querySelector(`.full-star-rating-modal label[for="starModal-${i}"]`);
                            if (starLabel) {
                                starLabel.querySelector('.star-svg-modal').style.fill = 'gold';
                                const radioButton = document.getElementById(`starModal-${i}`);
                                if (radioButton) {
                                    radioButton.checked = true;
                                }
                            }
                        }
                    }
                }

                
                const reviewModalElement = document.getElementById('reviewModal');
                if (reviewModalElement) {
                    reviewModalElement.addEventListener('show.bs.modal', initializeStarRatingModal);
                } else {
                    
                    initializeStarRatingModal();
                }
            }


           
            const heartIconModal = document.querySelector(".heart-icon-modal");
            const likedTrueModal = document.getElementById("likedTrueModal");
            const likedFalseModal = document.getElementById("likedFalseModal");

            if (heartIconModal && likedTrueModal && likedFalseModal) {
                document.querySelector(".heart-label-modal").addEventListener("click", function () {
                    if (likedTrueModal.checked) {
                        likedFalseModal.checked = true;
                        likedTrueModal.checked = false;
                        heartIconModal.style.fill = "none"; 
                    } else {
                        likedTrueModal.checked = true;
                        likedFalseModal.checked = false;
                        heartIconModal.style.fill = "#dc3545"; 
                    }
                });

                
                function initializeHeartStateModal() {
                    if (likedTrueModal.checked) {
                        heartIconModal.style.fill = "#dc3545";
                    } else {
                        heartIconModal.style.fill = "none";
                    }
                }
                const reviewModalElement = document.getElementById('reviewModal');
                if (reviewModalElement) {
                    reviewModalElement.addEventListener('show.bs.modal', initializeHeartStateModal);
                } else {
                    initializeHeartStateModal();
                }
            }


            const watchedToggleModal = document.getElementById("watchedToggleModal");
            const watchedDateModal = document.getElementById("watchedDateModal");
            const playedBeforeContainerModal = document.getElementById("playedBeforeContainerModal");

            if (watchedToggleModal && watchedDateModal && playedBeforeContainerModal) {
                function toggleWatchedFieldsModal() {
                    const show = watchedToggleModal.checked;
                    watchedDateModal.style.display = show ? "block" : "none";
                    playedBeforeContainerModal.style.display = show ? "block" : "none";

                    if (!show) {
                        document.getElementById("PlayedBeforeModal").checked = false;
                    }
                }

                watchedToggleModal.addEventListener("change", toggleWatchedFieldsModal);
                const reviewModalElement = document.getElementById('reviewModal');
                if (reviewModalElement) {
                    reviewModalElement.addEventListener('show.bs.modal', toggleWatchedFieldsModal);
                } else {
                    toggleWatchedFieldsModal();
                }
            }


            const logReviewForm = document.getElementById('logReviewForm');
            if (logReviewForm) {
                logReviewForm.addEventListener('submit', async function (e) {
                    e.preventDefault();
                    const form = e.target;
                    const data = new FormData(form);

                    if (!watchedToggleModal.checked) {
                        data.delete('WatchedOn');
                    }
                    if (!playedBeforeContainerModal.style.display === 'block') { 
                        data.delete('PlayedBefore');
                    }


                    const response = await fetch('?handler=LogReviewWithTracking', {
                        method: 'POST',
                        body: data
                    });

                    const reviewSuccessMessageModal = document.getElementById('reviewSuccessMessageModal');
                    if (response.ok) {
                        if (reviewSuccessMessageModal) {
                            reviewSuccessMessageModal.classList.remove('d-none');
                        }
                        setTimeout(() => {
                            const modal = bootstrap.Modal.getInstance(document.getElementById('reviewModal')); 
                            if (modal) modal.hide();
                            form.reset();
                            // Resetear estrellas
                            if (ratingInputModal) ratingInputModal.value = 0;
                            if (starsModal) { // Asegurarse de que starsModal esté definido
                                starsModal.forEach(s => s.style.fill = '#ddd');
                            }
                            // Resetear corazón
                            if (likedFalseModal) likedFalseModal.checked = true;
                            if (heartIconModal) heartIconModal.style.fill = "none";
                            // Resetear toggles
                            if (watchedToggleModal) watchedToggleModal.checked = true; 
                            toggleWatchedFieldsModal(); 
                            
                            if (reviewSuccessMessageModal) {
                                reviewSuccessMessageModal.classList.add('d-none');
                            }
                        }, 1500);
                    } else {
                        alert('Failed to submit review.');
                    }
                });
            }


           
            const starsPage = document.querySelectorAll('.star'); 
            const ratingInputPage = document.getElementById('RatingInput'); 

            starsPage.forEach(star => {
                star.addEventListener('click', () => {
                    const rating = star.dataset.value;
                    if (ratingInputPage) ratingInputPage.value = rating;

                    starsPage.forEach(s => {
                        s.classList.remove('text-warning');
                        if (parseInt(s.dataset.value) <= parseInt(rating)) {
                            s.classList.add('text-warning');
                        }
                    });
                });
            });

          
            const reviewFormPage = document.getElementById('reviewForm');
            if (reviewFormPage && reviewFormPage.id !== 'logReviewForm') { 
                reviewFormPage.addEventListener('submit', async function (e) {
                    e.preventDefault();
                    const form = e.target;
                    const data = new FormData(form);

                    const response = await fetch('?handler=LogReviewWithTracking', { 
                        body: data
                    });

                    if (response.ok) {
                        const reviewSuccessMessage = document.getElementById('reviewSuccessMessage');
                        if (reviewSuccessMessage) reviewSuccessMessage.classList.remove('d-none');
                        setTimeout(() => {
                            const modal = bootstrap.Modal.getInstance(document.getElementById('reviewLogModal')); 
                            if (modal) modal.hide();
                            form.reset();
                            starsPage.forEach(s => s.classList.remove('text-warning'));
                            if (ratingInputPage) ratingInputPage.value = 0;
                            if (reviewSuccessMessage) reviewSuccessMessage.classList.add('d-none');
                        }, 1500);
                    } else {
                        alert('Failed to submit review.');
                    }
                });
            }


            const searchListInput = document.getElementById("searchListInput");
            const userListsContainer = document.getElementById("userListsContainer");

            if (searchListInput && userListsContainer) {
                searchListInput.addEventListener("input", () => {
                    const query = searchListInput.value.toLowerCase();
                    const forms = userListsContainer.querySelectorAll("form");

                    forms.forEach(form => {
                        const text = form.querySelector("button").innerText.toLowerCase();
                        form.style.display = text.includes(query) ? "inline-block" : "none";
                    });
                });
            }

            document.querySelectorAll(".add-list-form").forEach(form => {
                form.addEventListener("submit", async (e) => {
                    e.preventDefault();
                    const formData = new FormData(form);

                    try {
                        const response = await fetch("?handler=AddGameToList", {
                            method: "POST",
                            body: formData
                        });

                        const result = await response.json();

                        const listModal = document.getElementById("listModal");
                        const listModalInstance = bootstrap.Modal.getInstance(listModal);
                        if (listModalInstance) listModalInstance.hide();

                        const listSuccessMessage = document.getElementById("listSuccessMessage");
                        if (listSuccessMessage) {
                            listSuccessMessage.textContent = result.success
                                ? "✅ Game added to list!"
                                : "❌ " + (result.message || "Error adding game to list.");

                            listSuccessMessage.classList.remove("d-none", "alert-success", "alert-danger");
                            listSuccessMessage.classList.add(result.success ? "alert-success" : "alert-danger");

                            setTimeout(() => listSuccessMessage.classList.add('d-none'), 4000);
                        }
                    } catch (err) {
                        console.error("Error en AddGameToList:", err);
                    }
                });
            });

            const screenshotModal = document.getElementById('screenshotModal');
            const enlargedScreenshot = document.getElementById('enlargedScreenshot');

            if (screenshotModal && enlargedScreenshot) {
                screenshotModal.addEventListener('show.bs.modal', event => {
                    const triggerElement = event.relatedTarget;
                    const screenshotUrl = triggerElement.dataset.screenshotUrl;

                    if (screenshotUrl) {
                        enlargedScreenshot.src = screenshotUrl;
                    }
                });

                screenshotModal.addEventListener('hidden.bs.modal', event => {
                    enlargedScreenshot.src = "";
                });
            }
        });
    </script>
}


<style>
    .game-overlay-content {
        position: absolute;
        top: 55%;
        left: 50%;
        transform: translateX(-50%);
        z-index: 10;
        color: white;
    }

    #screenshotModal .modal-header .btn-close {
        font-size: 1.5rem; 
        margin-right: 0.5rem; 
    }

    #enlargedScreenshot {
        max-width: 100%; 
        object-fit: contain; 
        
    }

    
    .glassy-modal {
        background-color: rgba(255, 255, 255, 0.8);
        backdrop-filter: blur(10px); 
        border: 1px solid rgba(255, 255, 255, 0.3);
    }

   

    
    .heart-icon-modal {
        width: 28px;
        height: 28px;
        fill: none; 
        stroke: #dc3545; 
        stroke-width: 2;
        transition: fill 0.3s ease; 
    }

    
    .full-star-rating-modal {
        display: flex;
        flex-direction: row-reverse; /
        justify-content: flex-end; 
    }

    .full-star-rating-modal input[type="radio"] {
        display: none; 
    }

    .full-star-rating-modal label {
        cursor: pointer;
        font-size: 1.5rem; 
        color: #ddd; 
        transition: color 0.2s ease-in-out;
    }

    .full-star-rating-modal label .star-svg-modal {
        width: 1.5em; 
        height: 1.5em;
        fill: #ddd; 
        transition: fill 0.2s ease-in-out;
    }

    .full-star-rating-modal label:hover .star-svg-modal,
    .full-star-rating-modal label:hover ~ label .star-svg-modal {
        fill: gold; /* Color dorado al pasar el ratón */
    }

    
    .full-star-rating-modal input[type="radio"]:checked ~ label .star-svg-modal {
        fill: gold; /* Color dorado cuando están seleccionadas */
    }

   
    .watched-box {
        border: 1px solid rgba(0, 0, 0, 0.125); /* Borde sutil */
    }

    .glassy-box-input {
        background-color: rgba(255, 255, 255, 0.6);
        backdrop-filter: blur(5px);
        border: 1px solid rgba(255, 255, 255, 0.3);
    }

</style>

